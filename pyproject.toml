[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "email-csv-extractor"
version = "0.1.0"
description = "Auto CSV log file ingestion from email to Microsoft Teams using Python"
authors = [{name = "Andrew Weaver", email = "andrewayersweaver+github@gmail.com"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "msal>=1.24.0",  # Microsoft Authentication Library
    "requests>=2.31.0",  # HTTP requests for MS Graph API
    "python-dotenv>=1.0.0",  # Environment variable management
    "click>=8.1.0",  # CLI framework
    "pydantic>=2.0.0",  # Data validation and settings
    "structlog>=23.0.0",  # Structured logging
    "tenacity>=8.2.0",  # Retry logic
    "aiohttp>=3.8.0",  # Async HTTP client
    "asyncio-throttle>=1.0.0",  # Rate limiting
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "ruff>=0.0.290",
    "mypy>=1.5.0",
]

[project.scripts]
email-csv-extractor = "email_csv_extractor.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/email_csv_extractor"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=email_csv_extractor",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=100",
    "--strict-markers",
    "--strict-config",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src/email_csv_extractor"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]


[tool.ruff]
line-length = 88
target-version = "py38"
src = ["src"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.8"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true